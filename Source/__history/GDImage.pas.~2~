unit GDImage;

interface

uses
  System.SysUtils, System.Classes, FMX.Controls, FMX.Objects, System.Types,
  FMX.Graphics, System.UITypes, FMX.Types;

type
  TGDImage = class(TImage)
  private
    FXRadius: Single;
    FYRadius: Single;
    procedure SetXRadius(const Value: Single);
    procedure SetYRadius(const Value: Single);
  protected
    procedure Paint; override;
  published
    property XRadius: Single read FXRadius write SetXRadius;
    property YRadius: Single read FYRadius write SetYRadius;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Delphi | Biblioteca GD', [TGDImage]);
end;

{ TGDImage }

procedure TGDImage.Paint;
var
  R: TRectF;
  Path: TPathData;
begin
  inherited;
  if (FXRadius > 0) or (FYRadius > 0) then
  begin
    Canvas.BeginScene;
    try
      R := LocalRect;
      Path := TPathData.Create;
      try
        Path.AddRectangle(R, FXRadius, FYRadius);
        Canvas.Fill.Path := Path;
        Canvas.Fill.Kind := TBrushKind.Bitmap;
        Canvas.Fill.Bitmap.WrapMode := TWrapMode.TileStretch;
        Canvas.Fill.Bitmap.Bitmap.Assign(Self.Bitmap);
        Canvas.FillRect(R, FXRadius, FYRadius, AllCorners, 1,
          TCornerType.Round);
      finally
        Path.Free;
      end;
    finally
      Canvas.EndScene;
    end;
  end;
end;

procedure TGDImage.SetXRadius(const Value: Single);
begin
  if FXRadius <> Value then
  begin
    FXRadius := Value;
    Repaint;
  end;
end;

procedure TGDImage.SetYRadius(const Value: Single);
begin
  if FYRadius <> Value then
  begin
    FYRadius := Value;
    Repaint;
  end;
end;

end.
