unit GDCornerButton;

interface

uses
  System.SysUtils, System.Classes, FMX.Types, FMX.Controls, FMX.StdCtrls,
  FMX.Graphics, System.UITypes, FMX.Objects;

type
  TButtonStroke = class(TPersistent)
  private
    FOwner: TGDCornerButton;
    FColor: TAlphaColor;
    FThickness: Single;
    procedure SetColor(const Value: TAlphaColor);
    procedure SetThickness(const Value: Single);
  public
    constructor Create(AOwner: TGDCornerButton);
  published
    property Color: TAlphaColor read FColor write SetColor;
    property Thickness: Single read FThickness write SetThickness;
  end;

  TGDCornerButton = class(TCornerButton)
  private
    FColor: TAlphaColor;
    FFillKind: TBrushKind;
    FStroke: TButtonStroke;
    procedure SetColor(const Value: TAlphaColor);
    procedure SetFillKind(const Value: TBrushKind);
    procedure SetStroke(const Value: TButtonStroke);
  protected
    procedure ApplyStyle; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  published
    property Color: TAlphaColor read FColor write SetColor;
    property FillKind: TBrushKind read FFillKind write SetFillKind default TBrushKind.Solid;
    property Stroke: TButtonStroke read FStroke write SetStroke;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Delphi | Biblioteca GD', [TGDCornerButton]);
end;

{ TButtonStroke }

constructor TButtonStroke.Create(AOwner: TGDCornerButton);
begin
  inherited Create;
  FOwner := AOwner;
end;

procedure TButtonStroke.SetColor(const Value: TAlphaColor);
begin
  if FColor <> Value then
  begin
    FColor := Value;
    FOwner.Repaint;
  end;
end;

procedure TButtonStroke.SetThickness(const Value: Single);
begin
  if FThickness <> Value then
  begin
    FThickness := Value;
    FOwner.Repaint;
  end;
end;

{ TGDCornerButton }

constructor TGDCornerButton.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FStroke := TButtonStroke.Create(Self);
  FFillKind := TBrushKind.Solid;
end;

destructor TGDCornerButton.Destroy;
begin
  FStroke.Free;
  inherited;
end;

procedure TGDCornerButton.ApplyStyle;
var
  Background: TFmxObject;
begin
  inherited;
  Background := FindStyleResource('background');
  if Assigned(Background) and (Background is TShape) then
  begin
    with TShape(Background) do
    begin
      Fill.Color := FColor;
      Fill.Kind := FFillKind;
      Stroke.Color := FStroke.Color;
      Stroke.Thickness := FStroke.Thickness;
    end;
  end;
end;

procedure TGDCornerButton.SetColor(const Value: TAlphaColor);
begin
  if FColor <> Value then
  begin
    FColor := Value;
    if Assigned(Scene) then ApplyStyle;
  end;
end;

procedure TGDCornerButton.SetFillKind(const Value: TBrushKind);
begin
  if FFillKind <> Value then
  begin
    FFillKind := Value;
    if Assigned(Scene) then ApplyStyle;
  end;
end;

procedure TGDCornerButton.SetStroke(const Value: TButtonStroke);
begin
  FStroke.Assign(Value);
end;

end.

