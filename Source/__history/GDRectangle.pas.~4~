unit GDRectangle;

interface

uses
  System.SysUtils, System.Classes, FMX.Types, FMX.Controls, FMX.StdCtrls,
  FMX.Graphics, System.UITypes, FMX.Objects, System.Math, System.Math.Vectors;

type
  TGDRectangle = class(TRectangle)
  private
    FSelected: Boolean;
    FCounterLabel: TLabel;
    FCounterCircle: TCircle;
    FCounter: Integer;
    FCounterVisible: Boolean;
    FCounterDiameter: Single;
    FCounterColor: TAlphaColor;
    procedure SetSelected(const Value: Boolean);
    procedure SetCounter(const Value: Integer);
    procedure SetCounterVisible(const Value: Boolean);
    procedure SetCounterDiameter(const Value: Single);
    procedure SetCounterColor(const Value: TAlphaColor);
    procedure UpdateCounterPosition;
  protected
    procedure Resize; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  published
    property Selected: Boolean read FSelected write SetSelected default False;

    property Counter: Integer read FCounter write SetCounter default 0;
    property CounterVisible: Boolean read FCounterVisible write SetCounterVisible default True;

    // Counter Appearance properties
    property CounterDiameter: Single read FCounterDiameter write SetCounterDiameter default 30;
    property CounterColor: TAlphaColor read FCounterColor write SetCounterColor default TAlphaColors.Red;

    // Counter Font properties
    property CounterFont: TFont read FCounterLabel.Font write FCounterLabel.Font;
    property CounterFontColor: TAlphaColor read FCounterLabel.FontColor write FCounterLabel.FontColor;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Delphi | Biblioteca GD', [TGDRectangle]);
end;

{ TGDRectangle }

constructor TGDRectangle.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);

  FCounterVisible := True;
  FCounterDiameter := 30;
  FCounterColor := TAlphaColors.Red;

  FCounterCircle := TCircle.Create(Self);
  FCounterCircle.Parent := Self;
  FCounterCircle.HitTest := False;
  FCounterCircle.Stroke.Kind := TBrushKind.None;
  FCounterCircle.Fill.Color := FCounterColor;
  UpdateCounterPosition;

  FCounterLabel := TLabel.Create(FCounterCircle);
  FCounterLabel.Parent := FCounterCircle;
  FCounterLabel.Align := TAlignLayout.Center;
  FCounterLabel.StyledSettings := [];
  FCounterLabel.FontColor := TAlphaColors.White;
end;

destructor TGDRectangle.Destroy;
begin
  FCounterLabel.Free;
  FCounterCircle.Free;
  inherited;
end;

procedure TGDRectangle.SetSelected(const Value: Boolean);
begin
  if FSelected <> Value then
  begin
    FSelected := Value;
    if FSelected then
      Stroke.Thickness := 3
    else
      Stroke.Thickness := 1;
  end;
end;

procedure TGDRectangle.UpdateCounterPosition;
begin
  FCounterCircle.Width := FCounterDiameter;
  FCounterCircle.Height := FCounterDiameter;
  FCounterCircle.Position.X := Width - (FCounterDiameter / 2);
  FCounterCircle.Position.Y := -(FCounterDiameter / 2);
end;

procedure TGDRectangle.Resize;
begin
  inherited;
  UpdateCounterPosition;
end;

procedure TGDRectangle.SetCounter(const Value: Integer);
begin
  if FCounter <> Value then
  begin
    FCounter := Value;
    FCounterLabel.Text := Value.ToString;
  end;
end;

procedure TGDRectangle.SetCounterVisible(const Value: Boolean);
begin
  if FCounterVisible <> Value then
  begin
    FCounterVisible := Value;
    FCounterCircle.Visible := Value;
  end;
end;

procedure TGDRectangle.SetCounterDiameter(const Value: Single);
begin
  if not SameValue(FCounterDiameter, Value) then
  begin
    FCounterDiameter := Value;
    UpdateCounterPosition;
  end;
end;

procedure TGDRectangle.SetCounterColor(const Value: TAlphaColor);
begin
  if FCounterColor <> Value then
  begin
    FCounterColor := Value;
    FCounterCircle.Fill.Color := Value;
  end;
end;


end.
