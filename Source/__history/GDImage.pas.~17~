unit GDImage;

interface

uses
  System.SysUtils, System.Classes, FMX.Types, FMX.Controls, FMX.Objects,
  FMX.ImgList, System.Types, FMX.Graphics, FMX.MultiResBitmap;

type
  TGDImage = class(TImage)
  private
    FImageList: TImageList;
    FActualImageName: string;
    FImageName: string;
    procedure SetImageList(const Value: TImageList);
    procedure SetImageName(const Value: string);
    procedure SetImageFromImageList(AImageName: String; AImage: TImage; AImageList: TImageList);
  protected
    procedure Loaded; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  published
    property ImageList: TImageList read FImageList write SetImageList;
    property ImageName: string read FImageName write SetImageName stored False;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Delphi | Biblioteca GD', [TGDImage]);
end;

constructor TGDImage.Create(AOwner: TComponent);
begin
  inherited;
  FImageName := '';
end;

destructor TGDImage.Destroy;
begin
  inherited;
end;

procedure TGDImage.Loaded;
begin
  inherited;
  if (FImageList <> nil) and (FActualImageName <> '') then
    SetImageFromImageList(FActualImageName, Self, FImageList);
end;

procedure TGDImage.SetImageFromImageList(AImageName: String; AImage: TImage; AImageList: TImageList);
var
  Bmp: TCustomBitmapItem;
  Size: TSize;
begin
  AImageList.BitmapItemByName(AImageName, Bmp, Size);
  AImage.Bitmap := Bmp.MultiResBitmap.Bitmaps[1.0];
end;

procedure TGDImage.SetImageList(const Value: TImageList);
var
  I: Integer;
begin
  if FImageList <> Value then
  begin
    FImageList := Value;
  end;
end;

procedure TGDImage.SetImageName(const Value: string);
begin
  if FImageName <> Value then
  begin
    FImageName := Value;
  end;
end;

end.

