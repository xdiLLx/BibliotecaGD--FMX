unit GDEdit;

interface

uses
  System.SysUtils, System.Classes, FMX.Edit, Data.DB, GD.Types, System.Types,
  System.Math, FMX.Types, System.UITypes, FMX.Dialogs, FMX.FontGlyphs,System.IOUtils,FMX.Text,
  {$IFDEF MSWINDOWS}
  Winapi.Windows
  {$ENDIF};

type
  TGDEdit = class(TEdit)
  private
    FDataSource: TDataSource;
    FDataField: string;
    FOriginalText: string;
    FOriginalDataChange: TDataChangeEvent;
    FOnKeyDown: TKeyEvent;
    FOnKeyPress: TKeyPressEvent;
    FLastCursorPosition: Integer;
    FDefaultFormat: TDefaultFormat;
    FUseEnterTab: Boolean;
    procedure SetDataSource(const Value: TDataSource);
    procedure SetDataField(const Value: string);
    procedure SetUseEnterTab(const Value: Boolean);
    procedure UpdateControlState;
    procedure UpdateData;
    procedure DataSetEvent(DataSet: TDataSet);
    procedure DataSourceChanged(Sender: TObject; Field: TField);
    function GetVersion: string;
    procedure IntermediateDataChange(Sender: TObject; Field: TField);
    procedure ValidateInput(Sender: TObject);
    function IsDigit(const Value: string): Boolean;
    function FilterNumeric(const AText: string): string;
    function FilterFloat(const AText: string; ADelimiter: string): string;
    procedure DoKeyPress(var Key: Char);
    function AutoCompleteDate(const AText: string): string;
    procedure SetDefaultFormat(const Value: TDefaultFormat);
    procedure DefaultFormatChanged(Sender: TObject);
  protected
    procedure KeyDown(var Key: Word; var KeyChar: WideChar;
      Shift: TShiftState); override;
    procedure Notification(AComponent: TComponent;
      Operation: TOperation); override;
    procedure DoEnter; override;
    procedure DoExit; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    function RemoveMask(const AText: string): string;
  published
    property About: String read GetVersion;
    property DataSource: TDataSource read FDataSource write SetDataSource;
    property DataField: string read FDataField write SetDataField;
    property OnKeyPress: TKeyPressEvent read FOnKeyPress write FOnKeyPress;
    property DefaultFormat: TDefaultFormat read FDefaultFormat
      write SetDefaultFormat;
    property UseEnterTab: Boolean read FUseEnterTab write SetUseEnterTab;

  end;

procedure register;

implementation

procedure register;
begin
  RegisterComponents('Delphi | Biblioteca GD', [TGDEdit]);
end;

function TGDEdit.AutoCompleteDate(const AText: string): string;
var
  Day, Month, Year: Word;
  Delimiter: Char;
  DateFormat: string;
begin
  DecodeDate(Now, Year, Month, Day);
  DateFormat := DefaultFormat.DateFormat;
  // Identifica o delimitador
  { if Pos('/', DateFormat) > 0 then
    Delimiter := '/'
    else if Pos('-', DateFormat) > 0 then
    Delimiter := '-'
    else if Pos('.', DateFormat) > 0 then
    Delimiter := '.'
    else }
  Delimiter := '/'; // Delimitador padrão caso não encontre

  Result := Trim(AText);

  if Result.IsEmpty or (Result = '0') then
  begin
    Result := ''; // Limpa se for vazio ou apenas um '0'
    Exit;
  end;

  // Processa de acordo com o formato
  if DateFormat = 'dd' + Delimiter + 'mm' + Delimiter + 'yyyy' then
  begin
    if Length(Result) <= 2 then
      Result := Format('%s' + Delimiter + '%.2d' + Delimiter + '%.4d',
        [Result, Month, Year])
    else if (Length(Result) = 5) and (Result[3] = Delimiter) then
      Result := Format('%s' + Delimiter + '%.4d', [Result, Year]);
  end
  else if DateFormat = 'mm' + Delimiter + 'dd' + Delimiter + 'yyyy' then
  begin
    if Length(Result) <= 2 then
      Result := Format('%.2d' + Delimiter + '%s' + Delimiter + '%.4d',
        [Month, Result, Year])
    else if (Length(Result) = 5) and (Result[3] = Delimiter) then
      Result := Format('%.2d' + Delimiter + '%s' + Delimiter + '%.4d',
        [Month, Result, Year]);
  end
  else if DateFormat = 'yyyy' + Delimiter + 'mm' + Delimiter + 'dd' then
  begin
    if Length(Result) <= 4 then
      Result := Format('%s' + Delimiter + '%.2d' + Delimiter + '%.2d',
        [Result, Month, Day])
    else if (Length(Result) = 7) and (Result[5] = Delimiter) then
      Result := Format('%s' + Delimiter + '%.2d', [Result, Day]);
  end;

  if Length(Result) < 10 then
    Result := ''; // Se a data for incompleta, limpe
end;

constructor TGDEdit.Create(AOwner: TComponent);
var
  FontPath: string;
begin
  inherited Create(AOwner);
  FDefaultFormat := TDefaultFormat.Create;
  FDefaultFormat.OnChange := DefaultFormatChanged;
  ReadOnly := True;
  OnTyping := ValidateInput;
  TextPrompt := '';
  FLastCursorPosition := -1;
  FUseEnterTab := True;
  TabStop := False;
  FontPath := TPath.Combine(ExtractFileDir(ParamStr(0)), 'YourFontFileName.ttf');
  if AddFontResource(PChar(FontPath)) > 0 then
    SendMessage(HWND_BROADCAST, WM_FONTCHANGE, 0, 0);
  tfont
  StyledSettings := [];
  Font.Family := 'dashicons';
  Text := '';
end;

procedure TGDEdit.DefaultFormatChanged(Sender: TObject);
begin
  DoExit;
end;

destructor TGDEdit.Destroy;
begin
  SetDataSource(nil);
  DefaultFormat.Free;
  inherited Destroy;
end;

procedure TGDEdit.SetDataSource(const Value: TDataSource);
begin
  if FDataSource <> Value then
  begin
    if Assigned(FDataSource) then
    begin
      FDataSource.RemoveFreeNotification(Self);
    end;

    FDataSource := Value;

    if Assigned(FDataSource) then
    begin
      FDataSource.FreeNotification(Self);

      // Guarde o evento OnDataChange anterior
      FOriginalDataChange := FDataSource.OnDataChange;
      FDataSource.OnDataChange := IntermediateDataChange;
    end;

    UpdateControlState;
  end;
end;

procedure TGDEdit.SetDefaultFormat(const Value: TDefaultFormat);
begin

end;

procedure TGDEdit.SetUseEnterTab(const Value: Boolean);
begin
  if FUseEnterTab <> Value then
  begin
    FUseEnterTab := Value;
  end;
end;

procedure TGDEdit.SetDataField(const Value: string);
begin
  if FDataField <> Value then
  begin
    FDataField := Value;
    UpdateData;
  end;
end;

procedure TGDEdit.UpdateControlState;
var
  Field: TField;
begin
  Field := nil;

  if Assigned(FDataSource) and Assigned(FDataSource.DataSet) then
  begin
    Field := FDataSource.DataSet.FindField(FDataField);
    TextPrompt := 'Preencha com ' + Field.DisplayLabel;
    ReadOnly := not(FDataSource.DataSet.State in [dsEdit, dsInsert]) or
      (Field = nil);
    if Assigned(Field) then
      Text := Field.AsString
    else
      Text := '';
  end
  else
  begin
    ReadOnly := True;
    Text := '';
  end;
end;

procedure TGDEdit.UpdateData;
var
  Field: TField;
begin
  Field := nil;
  if ReadOnly and Assigned(FDataSource) and Assigned(FDataSource.DataSet) then
    Field := FDataSource.DataSet.FieldByName(FDataField);

  if Assigned(Field) then
  begin
    Text := Field.AsString;
    TextPrompt := 'Preencha com ' + Field.DisplayLabel;
  end
  else
  begin
    Text := '';
  end;
end;

procedure TGDEdit.ValidateInput(Sender: TObject);
var
  Field: TField;
  LastChar: Char;
  DecimalSeparator: Char;
  CurrentSelStart: Integer;
  OldTextLength, TextDiff: Integer;
begin
  Field := nil;
  CurrentSelStart := SelStart;
  OldTextLength := Length(Text);

  if Assigned(FDataSource) and Assigned(FDataSource.DataSet) then
    Field := FDataSource.DataSet.FieldByName(FDataField);

  if Assigned(Field) and not Text.IsEmpty then
  begin
    LastChar := Text[Length(Text)];
    DecimalSeparator := FormatSettings.DecimalSeparator;

    case Field.DataType of
      ftString, ftWideString, ftMemo, ftWideMemo:
        begin
          SelStart := SelStart + 1;
        end;
      // Sem validações para strings e memos

      ftInteger, ftWord, ftSmallint, ftLargeint, ftByte:
        begin
          Text := FilterNumeric(Text);
          // SelStart := Length(Text);
        end;

      ftFloat, ftCurrency, ftBCD, ftFMTBcd:
        begin
          Text := FilterFloat(Text, DecimalSeparator);
          // SelStart := Length(Text);
        end;

      ftDate, ftDateTime, ftTime:
        // Simples verificação para datas e horários; isso pode precisar ser aprimorado
        begin
          if not CharInSet(LastChar, ['0' .. '9', '-', '/', ':']) then
            Text := Text.Remove(Length(Text) - 1);
        end;

      // Adicione outros tipos e validações conforme necessário
      // Para outros tipos, como Blob, Graphic, etc., pode não ser apropriado validar aqui

    end;
  end;
  SelStart := CurrentSelStart;
end;

procedure TGDEdit.DataSetEvent(DataSet: TDataSet);
begin
  UpdateControlState;
end;

procedure TGDEdit.DoEnter;
begin
  inherited DoEnter;
  FOriginalText := Text;
end;

procedure TGDEdit.DoExit;
var
  Field: TField;
  FloatValue: Extended;
begin
  inherited DoExit;
  if Assigned(FDataSource) and Assigned(FDataSource.DataSet) then
  begin
    Field := FDataSource.DataSet.FieldByName(FDataField);
    if (Field <> nil) and (Field.AsString <> Text) then
    begin
      if (Field.DataType in [ftDate, ftDateTime]) and (Length(Text) <= 10) then
      begin
        Text := AutoCompleteDate(Text);
      end;
      Field.AsString := Text;
      if Field.DataType in [ftFloat, ftCurrency, ftBCD, ftFMTBcd] then
      begin
        if TryStrToFloat(Text, FloatValue) then
          Text := FormatFloat(Self.DefaultFormat.FloatFormat, FloatValue);
      end;
    end;
  end;
end;

procedure TGDEdit.DoKeyPress(var Key: Char);
begin
  if Assigned(FOnKeyPress) then
    FOnKeyPress(Self, Key);
  if FUseEnterTab then
  begin
    If (Key = #13) Then
    Begin
      Key := #0;
      NextControl(Self);
    End;
  end;
end;

function TGDEdit.FilterFloat(const AText: string; ADelimiter: string): string;
begin
  var
    i: Integer;
  begin
    Result := '';
    for i := 1 to Length(AText) do
    begin
      if ((AText[i] in ['0' .. '9']) or (AText[i] = ADelimiter)) and
        (AText[i] <> ' ') then
        Result := Result + AText[i];
    end;
  end;
end;

function TGDEdit.FilterNumeric(const AText: string): string;
var
  i: Integer;
begin
  Result := '';
  for i := 1 to Length(AText) do
  begin
    if (AText[i] in ['0' .. '9']) and (AText[i] <> ' ') then
      Result := Result + AText[i];
  end;
end;

function TGDEdit.GetVersion: string;
begin
  Result := GetComponentVersion;
end;

procedure TGDEdit.IntermediateDataChange(Sender: TObject; Field: TField);
begin
  if Assigned(FOriginalDataChange) then
    FOriginalDataChange(Sender, Field);

  DataSourceChanged(Sender, Field);
end;

function TGDEdit.IsDigit(const Value: string): Boolean;
begin
  Result := (Length(Value) = 1) and (Value[1] >= '0') and (Value[1] <= '9');
end;

procedure TGDEdit.KeyDown(var Key: Word; var KeyChar: WideChar;
  Shift: TShiftState);
var
  TempChar: Char;
begin
  inherited;
  FLastCursorPosition := SelStart;
  if KeyChar = #0 then
    KeyChar := WideChar(Key);
  if KeyChar <> #0 then
  begin
    TempChar := Char(KeyChar);
    DoKeyPress(TempChar);
    if TempChar <> Char(KeyChar) then
    begin
      KeyChar := WideChar(TempChar);
      Key := Word(TempChar);
    end;
  end;

end;

procedure TGDEdit.Notification(AComponent: TComponent; Operation: TOperation);
begin
  inherited Notification(AComponent, Operation);
  if (Operation = opRemove) and (AComponent = FDataSource) then
    DataSource := nil;
end;

function TGDEdit.RemoveMask(const AText: string): string;
begin
  var
    i: Integer;
  begin
    Result := '';
    for i := 1 to Length(AText) do
      if CharInSet(AText[i], ['0' .. '9']) then
        Result := Result + AText[i];
  end;
end;

procedure TGDEdit.DataSourceChanged(Sender: TObject; Field: TField);
begin
  UpdateControlState;
end;

end.
