unit GDImage;

interface

uses
  System.SysUtils, System.Classes, FMX.Types, FMX.Controls, FMX.Graphics, FMX.Objects;

type
  TGDImage = class(TImage)
  private
    FXRadius, FYRadius: Single;
    procedure SetXRadius(const Value: Single);
    procedure SetYRadius(const Value: Single);
  protected
    procedure Paint; override;
  public
    constructor Create(AOwner: TComponent); override;
  published
    property XRadius: Single read FXRadius write SetXRadius;
    property YRadius: Single read FYRadius write SetYRadius;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Delphi | Biblioteca GD', [TGDImage]);
end;

{ TRoundedImage }

constructor TRoundedImage.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FXRadius := 10;
  FYRadius := 10;
end;

procedure TRoundedImage.Paint;
var
  R: TRectF;
  Path: TPathData;
begin
  R := LocalRect;
  Path := TPathData.Create;
  try
    Path.AddRoundRect(R, FXRadius, FYRadius, AllCorners);
    Canvas.FillPath(Path, 1);
    Canvas.DrawPath(Path, 1);
    inherited;
  finally
    Path.Free;
  end;
end;

procedure TRoundedImage.SetXRadius(const Value: Single);
begin
  if FXRadius <> Value then
  begin
    FXRadius := Value;
    Repaint;
  end;
end;

procedure TRoundedImage.SetYRadius(const Value: Single);
begin
  if FYRadius <> Value then
  begin
    FYRadius := Value;
    Repaint;
  end;
end;

end.

